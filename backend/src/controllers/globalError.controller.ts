import AppError from "../utils/appError";

/**
 * @objective Function to generate app error if user's token is invalid
 * @param _e error object
 * @returns 
 */
const handleTokenError = (_e: Error) => {
	return new AppError("Invalid token... please login again", 401);
};

/**
 * @objective Function to handle error in express routes globally
 * @param err error given by error catcher
 * @param _req Express request
 * @param res Express response
 * @param _next Express next Function
 */
export default (
	err: any,
	_req: ExpressTypes.Request,
	res: ExpressTypes.Response,
	_next: ExpressTypes.NextFn
) => {
	err.statusCode = err.statusCode || 500;
	err.status = err.status || "error";

	// If the current environment is development send the entire error and error stack as JSON response to the user in case of an error
	if (process.env.NODE_ENV !== "development") {
		return res.status(err.statusCode).json({
			error: err,
			status: err.status,
			stack: err.stack,
			message: err.message,
		});
	}
	// If the current environment is production then send only the status : success | fail and the message to the user in case of an error
	if (process.env.NODE_ENV === "development") {
		if (err.name === "JsonWebTokenError") err = handleTokenError(err);

		//
		if (err.code === 11000) {
			return res.status(err.statusCode).json({
				message: "Can't have duplicate entries",
				status: err.status,
			});
		}

		// isOperational field indicates the error is generated by the application (AppError class)
		if (err.isOperational) {
			return res.status(err.statusCode).json({
				message: err.message,
				status: err.status,
			});
		}
		// If the error is not generated by the application then log the error
		else {
			console.log(err);
			return res.status(500).json({
				error: "error",
				message: "Something went wrong",
			});
		}
	}
};
